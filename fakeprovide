#!/bin/bash
#
# This script will generate an RPM that "provides" a named dependency.

RPM_BUILDARCH=noarch
RPM_SUMMARY=
RPM_BUILD_SOURCE=0
RPM_BUILD_BINARY=1
RPM_ADDL_PROVIDES=()

# Exit with an error message.
die () {
	echo "$0: ERROR: $1" >&2
	[ "$2" ] && cat "$2" >&2
	exit 1
}

# Show usage information.
usage () {
	echo "$0: usage: $0 [ -v version ] [ -a arch ] [ -s summary ] [-P extra provides] [ -BS ] name"
}

while getopts 'a:s:hSBP:v:' ch; do
	case $ch in
		(a)	RPM_BUILDARCH="$OPTARG";;
		(s)	RPM_SUMMARY="$OPTARG";;
		(S)	RPM_BUILD_SOURCE=1;;
		(B)	RPM_BUILD_BINARY=0;;
		(P)	RPM_ADDL_PROVIDES+=("$OPTARG");;
		(v)	RPM_VERSION="$OPTARG";;
		(h)	usage
			exit 0
			;;

		(\?)	usage >&2
			exit 2
			;;
	esac
done
shift $(( $OPTIND - 1 ))

# Put everything in a temporary directory 
# (and clean it up when we're done).
tmpdir=$(mktemp -d -t rpmspecXXXXXX)
trap "rm -rf $tmpdir" EXIT INT QUIT TERM HUP

provide=$1

if [ ! "$provide" ]; then
	die "nothing to provide."
fi

mkdir -p $tmpdir/rpmbuild/{SOURCES,BUILD,RPMS/$RPM_BUILDARCH}
cat > $tmpdir/rpmbuild/SOURCES/README <<EOF
This package was generated by fakeprovide.

See http://github.com/larsks/fakeprovide/ for more information.
EOF

# Create the RPM spec file.
cat > $tmpdir/fakeprovide.spec <<EOF
Name:		fakeprovide-$provide
Version:	${RPM_VERSION:-$(date "+%Y%m%d%H%M%S")}
Release:	1%{?dist}
Summary:	${RPM_SUMMARY:-Fake provide for $provide.}

Group:		Fake
License:	GPL
BuildRoot:	%(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)

Source:		README
Provides:	$provide

$(for p in "${RPM_ADDL_PROVIDES[@]}"; do
echo "Provides: $p"
done)

BuildArch:	$RPM_BUILDARCH

%description
%{summary}

%prep
%setup -c -T

%build
cp %{SOURCE0} .


%install

%files
%defattr(-,root,root,-)
%doc README



%changelog

EOF

# We want to avoid problems caused by a local .rpmmacros file, so
# we point HOME to our temporary directory.
export HOME=$tmpdir

if [ "$RPM_BUILD_SOURCE" = 1 ]; then
	echo "Building source RPM (SRPM)." >&2
	rpmbuild -bs --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/srpm.log 2>&1 ||
		die "Failed to build source RPM." $tmpdir/srpm.log
fi

if [ "$RPM_BUILD_BINARY" = 1 ]; then
	echo "Building binary RPM." >&2
	if [ "$RPM_BUILDARCH" = noarch ]; then
		rpmbuild -bb --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/rpm.log 2>&1 ||
			die "Failed to build binary RPM." $tmpdir/rpm.log
	else
		setarch $RPM_BUILDARCH rpmbuild -bb --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/rpm.log 2>&1 ||
			die "Failed to build binary RPM." $tmpdir/rpm.log
	fi
fi

for rpm in $tmpdir/rpmbuild/RPMS/*/*.rpm $tmpdir/rpmbuild/SRPMS/*.rpm; do
	[ -f "$rpm" ] || continue

	cp "$rpm" .
	ls "$(basename $rpm)"
done


